



















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `MySqlDbHelper`
//     Provider:               `MySql.Data.MySqlClient`
//     Connection String:      `Server=localhost;Database=youshi;Uid=root;Pwd=root;charset=utf8;pooling=true;`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace Yous
{

	public partial class MySqlDbHelperDB : Database
	{
		public MySqlDbHelperDB() 
			: base("MySqlDbHelper")
		{
			CommonConstruct();
		}

		public MySqlDbHelperDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			MySqlDbHelperDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static MySqlDbHelperDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new MySqlDbHelperDB();
        }

		[ThreadStatic] static MySqlDbHelperDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static MySqlDbHelperDB repo { get { return MySqlDbHelperDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



    

	[TableName("youshi.base_area")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class base_area : MySqlDbHelperDB.Record<base_area>  
    {



		[Column] public int Id { get; set; }





		[Column] public string Name { get; set; }



	}

    

	[TableName("youshi.base_city")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class base_city : MySqlDbHelperDB.Record<base_city>  
    {



		[Column] public int Id { get; set; }





		[Column] public string Name { get; set; }



	}

    

	[TableName("youshi.base_hot_area")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class base_hot_area : MySqlDbHelperDB.Record<base_hot_area>  
    {



		[Column] public int Id { get; set; }





		[Column] public string Name { get; set; }



	}

    

	[TableName("youshi.base_province")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class base_province : MySqlDbHelperDB.Record<base_province>  
    {



		[Column] public int Id { get; set; }





		[Column] public string Name { get; set; }



	}

    

	[TableName("youshi.base_staff")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class base_staff : MySqlDbHelperDB.Record<base_staff>  
    {



		[Column] public int Id { get; set; }





		[Column] public string Name { get; set; }





		[Column] public string Tel { get; set; }





		[Column] public string Email { get; set; }





		[Column] public string Remark { get; set; }





		[Column] public int? State { get; set; }



	}

    

	[TableName("youshi.base_userinfo")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class base_userinfo : MySqlDbHelperDB.Record<base_userinfo>  
    {



		[Column] public int Id { get; set; }





		[Column] public string Name { get; set; }





		[Column] public string Tel { get; set; }





		[Column] public string Email { get; set; }



	}

    

	[TableName("youshi.p_f_house_price")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class p_f_house_price : MySqlDbHelperDB.Record<p_f_house_price>  
    {



		[Column] public int Id { get; set; }





		[Column] public string House_Id { get; set; }





		[Column] public double? Price { get; set; }



	}

    

	[TableName("youshi.p_f_house_support")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class p_f_house_support : MySqlDbHelperDB.Record<p_f_house_support>  
    {



		[Column] public int Id { get; set; }





		[Column] public int? Support_Type { get; set; }





		[Column] public string Name { get; set; }





		[Column] public int? Latitude { get; set; }





		[Column] public int? Longitude { get; set; }





		[Column] public string House_Id { get; set; }



	}

    

	[TableName("youshi.p_f_house_traffic")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class p_f_house_traffic : MySqlDbHelperDB.Record<p_f_house_traffic>  
    {



		[Column] public int Id { get; set; }





		[Column] public string House_Id { get; set; }





		[Column] public int? Traffic_Type { get; set; }





		[Column] public string Name { get; set; }



	}

    

	[TableName("youshi.p_house")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class p_house : MySqlDbHelperDB.Record<p_house>  
    {



		[Column] public int Id { get; set; }





		[Column] public string Code { get; set; }





		[Column] public string Name { get; set; }





		[Column] public int? PropertyLevel { get; set; }





		[Column] public int? Area { get; set; }





		[Column] public int? Station_Form { get; set; }





		[Column] public int? Station_To { get; set; }





		[Column] public int? Decorate { get; set; }





		[Column] public string Floor { get; set; }





		[Column] public int? Height { get; set; }





		[Column] public double? PropertyCosts { get; set; }





		[Column] public string PropertyCompany { get; set; }





		[Column] public string RoomRate { get; set; }





		[Column] public int? Latitude { get; set; }





		[Column] public string Longitude { get; set; }



	}

    

	[TableName("youshi.p_order")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class p_order : MySqlDbHelperDB.Record<p_order>  
    {



		[Column] public int Id { get; set; }





		[Column] public string Code { get; set; }





		[Column] public string Name { get; set; }





		[Column] public string CreateTime { get; set; }





		[Column] public string House_Id { get; set; }





		[Column] public int? State { get; set; }



	}

    

	[TableName("youshi.test")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class test : MySqlDbHelperDB.Record<test>  
    {



		[Column] public int Id { get; set; }



	}


}
